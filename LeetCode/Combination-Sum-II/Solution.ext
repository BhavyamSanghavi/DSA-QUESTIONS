class Solution {
public:
    void helper(int index, int target, vector<int>& candidates,
    vector<vector<int>>& ans, vector<int>& ds) 
    {

        if (target == 0) 
        {
            ans.push_back(ds);
            return;
        }
        if (target < 0)
            return;
        if (index < candidates.size()) 
        {
            ds.push_back(candidates[index]);
            helper(index + 1, target - candidates[index], candidates, ans, ds);
            ds.pop_back();
            // skip duplicates
            while (index + 1 < candidates.size() &&
                   candidates[index] == candidates[index + 1]) 
            {
                index++;
            }

            helper(index + 1, target, candidates, ans, ds);
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans;
        vector<int> temp;
        helper(0, target, candidates, ans, temp);
        return ans;
    }
};